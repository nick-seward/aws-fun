AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Setup a VPC in the Canada Central region. You get the following setup for you,

  1. Creates 3 subnets (Public, Private, Data) in each AZ. 
  2. Creates 3 Network ACL's that deny all traffic be default. There's a NACL for each of the 3 Subnets. 
  3. 2 route tables are created, 1 that acts as the default and the other for the public subnet.
  4. An Internet Gateway is created, attached to the VPC and a route entry is added to the public route table 

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 192.168.0.0/22
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"
  
  # --- Internet Gateway ---
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, igw]]
  
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  # --- Route Tables ---
  MainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, main-route]]
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, public-route]]

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref IGW

  # --- Network ACLs ---
  DataNACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Join ["-", [!Ref VPC, data-nacl]]
      VpcId: !Ref VPC

  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Join ["-", [!Ref VPC, private-nacl]]
      VpcId: !Ref VPC
  
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: !Join ["-", [!Ref VPC, public-nacl]]
      VpcId: !Ref VPC

  # --- Public Subnet A ---
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 192.168.0.1/26
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, public-a]]

  PublicSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  
  PublicSubnetANACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Ref PublicSubnetA

  # --- Private Subnet A ---
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 192.168.0.64/26
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, private-a]]

  PrivateSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetANACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref PrivateSubnetA
      
  # --- Data Subnet A ---
  DataSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 192.168.0.128/26
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, data-a]]

  DataSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref DataSubnetA

  DataSubnetANACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref DataNACL
      SubnetId: !Ref DataSubnetA

  # --- Public Subnet B ---
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 192.168.1.0/26
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, public-b]]

  PublicSubneBARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  
  PublicSubnetBNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Ref PublicSubnetB

  # --- Private Subnet B ---
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 192.168.1.64/26
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, private-b]]
  
  PrivateSubneBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetBNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref PrivateSubnetB
 
  # --- Data Subnet B ---
  DataSubnetB:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 192.168.1.128/26
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, data-b]]

  DataSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MainRouteTable
      SubnetId: !Ref DataSubnetB
  
  DataSubnetBNACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref DataNACL
      SubnetId: !Ref DataSubnetB

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'id']]

  PublicSubnetA:
    Description: Public Subnet A ID
    Value: !Ref PublicSubnetA
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'public-subnet-a', 'id']]
  
  PrivateSubnetA:
    Description: Private Subnet A ID
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'private-subnet-a', 'id']]
  
  DataSubnetA:
    Description: Data Subnet A ID
    Value: !Ref DataSubnetA
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'data-subnet-a', 'id']]

  PublicSubnetB:
    Description: Public Subnet B ID
    Value: !Ref PublicSubnetB
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'public-subnet-b', 'id']]
  
  PrivateSubnetB:
    Description: Private Subnet B ID
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'private-subnet-b', 'id']]
  
  DataSubnetB:
    Description: Data Subnet B ID
    Value: !Ref DataSubnetA
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'data-subnet-b', 'id']]
  
  PublicNACL:
    Description: Public Network ACL
    Value: !Ref PublicNACL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'public-nacl', 'id']]
  
  PrivateNACL:
    Description: Private Network ACL
    Value: !Ref PrivateNACL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'private-nacl', 'id']]

  DataNACL:
    Description: Data Network ACL
    Value: !Ref DataNACL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", 'data-nacl', 'id']]
  